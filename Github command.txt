echo "# gitcommand" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://<developerkey>@github.com:gitsumakwel/gitcommand.git
git push -u origin main


git remote add origin https://<developerkey>@github.com:gitsumakwel/gitcommand.git
git branch -M main
git push -u origin main

//-a will not include untracked files
git commit -a -m 
//will add everything in the repository
git add -A   

//create an alias to add files for commit
git config --global alias.addcommit '!git add -A && git commit -m'
git config --global alias.addcommit 'commit -a -m'
//use: git addcommit "Message here"

//Revert to previous documents
//show commit history
git log

git revert <commit hash code>
//nano file will appear
//type  :q!

//shorter hash and commit history
git reflog
git reset --hard <commit hash code shorter>

//reset to the last commit
git reset --hard HEAD

//reset any changes to local
//git reset --hard

//Pretty Logs
git log --decorator --graph --oneline


//Search logs
git log -S "Text to search"
//will log all the commits that is associated with the searched text



//Allows to save what you are doing without deleting
//you can switch to any branch without losing your changes
//then comeback later
git stash
//to comeback
git stash pop


//create branch
git branch branchname
//switch to branch
git switch branchname
//create and switch to branch
git branch -M branchname
//delete branch
git branch -d branchname


//pull and merge from remote repository to local branch
git fetch


//to copy repository to your local folder
git clone github.com:gitsumakwel/gitcommand.git


//list all branches with details
git branch -vv
//remove the reference to branch in your local repository that is no longer in the remote
git remote update --prune
//list all branch that has no more reference to the remote repository
git branch -vv | awk '/:gone]/{print $1}'
//to actually remove the list branch
git branch -vv | awk '/:gone]/{print $1}' | xargs git branch -d


//wrong changes to a branch but you want to apply to another branch
git stash
git checkout branch123
git stash apply


//how to remove secrets in your remote repository
1. create a file .gitignore in your root directory
 and add .env file name in that .gitignore folder.
2. After that You must untracked the .env file from git using 
git rm --cached .env 
3. git add . 
4. git commit -m "removing secrets" 
//Optional: 
  //to switch the name of the unborn branch to main
  git checkout -b main
  // or only works once you have an initial commit.
  git branch -m main  
5. git push -u origin main . Now your .env file is remove from github repo.


Reference:
https://stackoverflow.com/questions/30696930/how-to-hide-env-file-from-github
https://www.youtube.com/watch?v=mnmYwRoSisg
https://snyk.io/blog/10-git-aliases-for-faster-and-productive-git-workflow/


